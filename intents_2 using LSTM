{
  "cells": [
    {
      "metadata": {
        "id": "xpecFFrBR9op"
      },
      "cell_type": "markdown",
      "source": [
        "### Import libraries"
      ]
    },
    {
      "metadata": {
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "trusted": true,
        "id": "wBlD7HIxR9ou"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import json\n",
        "import re\n",
        "import tensorflow as tf\n",
        "import random\n",
        "import spacy\n",
        "nlp = spacy.load('en_core_web_sm')"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "metadata": {
        "id": "mrLzfx1aR9ow"
      },
      "cell_type": "markdown",
      "source": [
        "### Import json file"
      ]
    },
    {
      "metadata": {
        "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
        "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
        "trusted": true,
        "id": "9vo5REmqR9ox"
      },
      "cell_type": "code",
      "source": [
        "with open('intents_2.json') as f:\n",
        "    intents = json.load(f)"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "metadata": {
        "id": "h50v_EWfR9ox"
      },
      "cell_type": "markdown",
      "source": [
        "### Preprocessing data\n",
        "In this part we gonna clean data, split them into inputs and targets tensor, build a tokenizer dictionary and turn sentences into sequences.\n",
        "The target tensor has a bunch of list with a length of unique title list."
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "id": "9q6ks38qR9oy"
      },
      "cell_type": "code",
      "source": [
        "def preprocessing(line):\n",
        "    line = re.sub(r'[^a-zA-z.?!\\']', ' ', line)\n",
        "    line = re.sub(r'[ ]+', ' ', line)\n",
        "    return line"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def isString(x):\n",
        "  return isinstance(x, str)"
      ],
      "metadata": {
        "id": "rNXj3VwvZ0MG"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def listToString(s): \n",
        "    \n",
        "    # initialize an empty string\n",
        "    str1 = \" \" \n",
        "    \n",
        "    # return string  \n",
        "    return (str1.join(s))"
      ],
      "metadata": {
        "id": "pqKHZsSkaVMM"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "id": "KyTuivvIR9oy"
      },
      "cell_type": "code",
      "source": [
        "# get text and intent title from json data\n",
        "inputs, targets = [], []\n",
        "classes = []\n",
        "intent_doc = {}\n",
        "\n",
        "for intent in intents['intents']:\n",
        "    if(isString(intent['tag'])):\n",
        "      if intent['tag'] not in classes:\n",
        "        classes.append(intent['tag'])\n",
        "      if intent['tag'] not in intent_doc:\n",
        "        intent_doc[intent['tag']] = []\n",
        "    else:\n",
        "      tag = listToString(intent['tag'])\n",
        "      if tag not in classes:\n",
        "        classes.append(tag)\n",
        "      if tag not in intent_doc:\n",
        "        intent_doc[tag] = []\n",
        "        \n",
        "    for text in intent['patterns']:\n",
        "        inputs.append(preprocessing(text))\n",
        "        targets.append(intent['tag'])"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "id": "YLYDsC_eR9o0"
      },
      "cell_type": "code",
      "source": [
        "def tokenize_data(input_list):\n",
        "    tokenizer = tf.keras.preprocessing.text.Tokenizer(filters='', oov_token='<unk>')\n",
        "    \n",
        "    tokenizer.fit_on_texts(input_list)\n",
        "    \n",
        "    input_seq = tokenizer.texts_to_sequences(input_list)\n",
        "\n",
        "    input_seq = tf.keras.preprocessing.sequence.pad_sequences(input_seq, padding='pre')\n",
        "    \n",
        "    return tokenizer, input_seq\n",
        "\n",
        "# preprocess input data\n",
        "tokenizer, input_tensor = tokenize_data(inputs)"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "id": "YofU8mZjR9o1"
      },
      "cell_type": "code",
      "source": [
        "def create_categorical_target(targets):\n",
        "    word={}\n",
        "    categorical_target=[]\n",
        "    counter=0\n",
        "    for trg in targets:\n",
        "        x = trg[0]\n",
        "        if x not in word:\n",
        "            word[x]=counter\n",
        "            counter+=1\n",
        "        categorical_target.append(word[x])\n",
        "    \n",
        "    categorical_tensor = tf.keras.utils.to_categorical(categorical_target, num_classes=len(word), dtype='int32')\n",
        "    return categorical_tensor, dict((v,k) for k, v in word.items())\n",
        "\n",
        "# preprocess output data\n",
        "target_tensor, trg_index_word = create_categorical_target(targets)"
      ],
      "execution_count": 24,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9BPyeu45R9o1",
        "outputId": "df8071c2-9b09-4ed5-fee6-afa7303d384a"
      },
      "cell_type": "code",
      "source": [
        "print('input shape: {} and output shape: {}'.format(input_tensor.shape, target_tensor.shape))"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "input shape: (1457, 39) and output shape: (1457, 221)\n"
          ]
        }
      ]
    },
    {
      "metadata": {
        "id": "nLueR8WKR9o2"
      },
      "cell_type": "markdown",
      "source": [
        "### Build the model"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(input_tensor,target_tensor,test_size=0.20)"
      ],
      "metadata": {
        "id": "trv9oXR8eNtt"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "id": "NyeXCFXMR9o3"
      },
      "cell_type": "code",
      "source": [
        "# hyperparameters\n",
        "epochs=50\n",
        "vocab_size=len(tokenizer.word_index) + 1\n",
        "embed_dim=256\n",
        "units=128\n",
        "target_length=target_tensor.shape[1]"
      ],
      "execution_count": 27,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0bbFCT_QR9o3",
        "outputId": "47940a99-af7f-4b6a-b365-43425a2c3aa7"
      },
      "cell_type": "code",
      "source": [
        "# build RNN Model with tensorflow\n",
        "model = tf.keras.models.Sequential([\n",
        "    tf.keras.layers.Embedding(vocab_size, embed_dim),\n",
        "    tf.keras.layers.LSTM(units, dropout=0.3),\n",
        "    tf.keras.layers.Dense(units, activation='tanh'),\n",
        "    tf.keras.layers.Dropout(0.3),\n",
        "    tf.keras.layers.Dense(64, activation='tanh'),\n",
        "    tf.keras.layers.Dropout(0.3),\n",
        "     tf.keras.layers.Dense(32, activation='relu'),\n",
        "    tf.keras.layers.Dropout(0.3),\n",
        "    tf.keras.layers.Dense(target_length, activation='softmax')\n",
        "])\n",
        "optimizer = tf.keras.optimizers.Adam(lr=1e-3)\n",
        "model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "model.summary()"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_4\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " embedding_4 (Embedding)     (None, None, 256)         256256    \n",
            "                                                                 \n",
            " lstm_4 (LSTM)               (None, 128)               197120    \n",
            "                                                                 \n",
            " dense_16 (Dense)            (None, 128)               16512     \n",
            "                                                                 \n",
            " dropout_12 (Dropout)        (None, 128)               0         \n",
            "                                                                 \n",
            " dense_17 (Dense)            (None, 64)                8256      \n",
            "                                                                 \n",
            " dropout_13 (Dropout)        (None, 64)                0         \n",
            "                                                                 \n",
            " dense_18 (Dense)            (None, 32)                2080      \n",
            "                                                                 \n",
            " dropout_14 (Dropout)        (None, 32)                0         \n",
            "                                                                 \n",
            " dense_19 (Dense)            (None, 221)               7293      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 487,517\n",
            "Trainable params: 487,517\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/adam.py:105: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n",
            "  super(Adam, self).__init__(name, **kwargs)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# early_stop = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=4)\n",
        "\n",
        "# train the model\n",
        "# model.fit(input_tensor, target_tensor, epochs=epochs)\n",
        "from keras.callbacks import History\n",
        "history = History()\n",
        "m = model.fit(X_train, Y_train, validation_data = (X_test, Y_test), batch_size = 5,\n",
        "                   epochs = 50, callbacks = [history]) "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BoxRL4tfRRuY",
        "outputId": "045cdd80-500d-41ce-da1c-6545a70efef1"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "233/233 [==============================] - 6s 19ms/step - loss: 5.0607 - accuracy: 0.0240 - val_loss: 4.3669 - val_accuracy: 0.0240\n",
            "Epoch 2/50\n",
            "233/233 [==============================] - 4s 18ms/step - loss: 3.9574 - accuracy: 0.1116 - val_loss: 3.3854 - val_accuracy: 0.2123\n",
            "Epoch 3/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 3.2058 - accuracy: 0.2052 - val_loss: 2.7566 - val_accuracy: 0.3733\n",
            "Epoch 4/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 2.7437 - accuracy: 0.2824 - val_loss: 2.3830 - val_accuracy: 0.5411\n",
            "Epoch 5/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 2.3839 - accuracy: 0.3700 - val_loss: 2.0294 - val_accuracy: 0.6062\n",
            "Epoch 6/50\n",
            "233/233 [==============================] - 4s 18ms/step - loss: 2.2420 - accuracy: 0.3940 - val_loss: 1.9056 - val_accuracy: 0.5959\n",
            "Epoch 7/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 1.9044 - accuracy: 0.5167 - val_loss: 1.6604 - val_accuracy: 0.6884\n",
            "Epoch 8/50\n",
            "233/233 [==============================] - 4s 18ms/step - loss: 1.7781 - accuracy: 0.5262 - val_loss: 1.6802 - val_accuracy: 0.6507\n",
            "Epoch 9/50\n",
            "233/233 [==============================] - 4s 18ms/step - loss: 1.6331 - accuracy: 0.5682 - val_loss: 1.4690 - val_accuracy: 0.7500\n",
            "Epoch 10/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 1.5557 - accuracy: 0.5914 - val_loss: 1.5065 - val_accuracy: 0.7808\n",
            "Epoch 11/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 1.4465 - accuracy: 0.6232 - val_loss: 1.3529 - val_accuracy: 0.7979\n",
            "Epoch 12/50\n",
            "233/233 [==============================] - 4s 18ms/step - loss: 1.3747 - accuracy: 0.6197 - val_loss: 1.4067 - val_accuracy: 0.7740\n",
            "Epoch 13/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 1.3332 - accuracy: 0.6524 - val_loss: 1.2900 - val_accuracy: 0.8116\n",
            "Epoch 14/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 1.2218 - accuracy: 0.6635 - val_loss: 1.3722 - val_accuracy: 0.7979\n",
            "Epoch 15/50\n",
            "233/233 [==============================] - 4s 19ms/step - loss: 1.2292 - accuracy: 0.6618 - val_loss: 1.3909 - val_accuracy: 0.8116\n",
            "Epoch 16/50\n",
            "233/233 [==============================] - 4s 19ms/step - loss: 1.1146 - accuracy: 0.6876 - val_loss: 1.3827 - val_accuracy: 0.8185\n",
            "Epoch 17/50\n",
            "233/233 [==============================] - 4s 18ms/step - loss: 1.0951 - accuracy: 0.7004 - val_loss: 1.3665 - val_accuracy: 0.8116\n",
            "Epoch 18/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 1.0408 - accuracy: 0.7305 - val_loss: 1.3444 - val_accuracy: 0.8322\n",
            "Epoch 19/50\n",
            "233/233 [==============================] - 4s 18ms/step - loss: 1.0715 - accuracy: 0.7116 - val_loss: 1.4399 - val_accuracy: 0.8356\n",
            "Epoch 20/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 1.0248 - accuracy: 0.7107 - val_loss: 1.5142 - val_accuracy: 0.8219\n",
            "Epoch 21/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 1.0044 - accuracy: 0.7279 - val_loss: 1.3966 - val_accuracy: 0.8425\n",
            "Epoch 22/50\n",
            "233/233 [==============================] - 4s 18ms/step - loss: 0.9384 - accuracy: 0.7382 - val_loss: 1.4467 - val_accuracy: 0.8322\n",
            "Epoch 23/50\n",
            "233/233 [==============================] - 4s 18ms/step - loss: 0.9339 - accuracy: 0.7373 - val_loss: 1.4563 - val_accuracy: 0.8288\n",
            "Epoch 24/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 0.9484 - accuracy: 0.7399 - val_loss: 1.4998 - val_accuracy: 0.8356\n",
            "Epoch 25/50\n",
            "233/233 [==============================] - 4s 18ms/step - loss: 0.9298 - accuracy: 0.7459 - val_loss: 1.4669 - val_accuracy: 0.8356\n",
            "Epoch 26/50\n",
            "233/233 [==============================] - 4s 18ms/step - loss: 0.8814 - accuracy: 0.7665 - val_loss: 1.5450 - val_accuracy: 0.8390\n",
            "Epoch 27/50\n",
            "233/233 [==============================] - 4s 19ms/step - loss: 0.8326 - accuracy: 0.7700 - val_loss: 1.7027 - val_accuracy: 0.8288\n",
            "Epoch 28/50\n",
            "233/233 [==============================] - 4s 18ms/step - loss: 0.8495 - accuracy: 0.7622 - val_loss: 1.5698 - val_accuracy: 0.8459\n",
            "Epoch 29/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 0.7727 - accuracy: 0.7828 - val_loss: 1.8117 - val_accuracy: 0.8390\n",
            "Epoch 30/50\n",
            "233/233 [==============================] - 4s 19ms/step - loss: 0.8219 - accuracy: 0.7760 - val_loss: 1.6925 - val_accuracy: 0.8322\n",
            "Epoch 31/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 0.8346 - accuracy: 0.7665 - val_loss: 1.6878 - val_accuracy: 0.8288\n",
            "Epoch 32/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 0.7975 - accuracy: 0.7751 - val_loss: 1.9070 - val_accuracy: 0.8356\n",
            "Epoch 33/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 0.7685 - accuracy: 0.7837 - val_loss: 1.7258 - val_accuracy: 0.8288\n",
            "Epoch 34/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 0.7449 - accuracy: 0.7794 - val_loss: 1.7482 - val_accuracy: 0.8425\n",
            "Epoch 35/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 0.7647 - accuracy: 0.7906 - val_loss: 1.8567 - val_accuracy: 0.8390\n",
            "Epoch 36/50\n",
            "233/233 [==============================] - 4s 19ms/step - loss: 0.6965 - accuracy: 0.8077 - val_loss: 1.8605 - val_accuracy: 0.8356\n",
            "Epoch 37/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 0.7339 - accuracy: 0.7931 - val_loss: 1.9159 - val_accuracy: 0.8459\n",
            "Epoch 38/50\n",
            "233/233 [==============================] - 4s 19ms/step - loss: 0.7158 - accuracy: 0.7940 - val_loss: 2.0522 - val_accuracy: 0.8322\n",
            "Epoch 39/50\n",
            "233/233 [==============================] - 4s 19ms/step - loss: 0.7051 - accuracy: 0.8017 - val_loss: 1.9377 - val_accuracy: 0.8425\n",
            "Epoch 40/50\n",
            "233/233 [==============================] - 4s 19ms/step - loss: 0.7840 - accuracy: 0.7888 - val_loss: 1.8370 - val_accuracy: 0.8459\n",
            "Epoch 41/50\n",
            "233/233 [==============================] - 4s 19ms/step - loss: 0.7138 - accuracy: 0.7931 - val_loss: 1.9670 - val_accuracy: 0.8527\n",
            "Epoch 42/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 0.6400 - accuracy: 0.8146 - val_loss: 1.8976 - val_accuracy: 0.8459\n",
            "Epoch 43/50\n",
            "233/233 [==============================] - 4s 19ms/step - loss: 0.6577 - accuracy: 0.8043 - val_loss: 1.8657 - val_accuracy: 0.8459\n",
            "Epoch 44/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 0.6594 - accuracy: 0.8163 - val_loss: 2.1485 - val_accuracy: 0.8425\n",
            "Epoch 45/50\n",
            "233/233 [==============================] - 4s 18ms/step - loss: 0.6580 - accuracy: 0.8052 - val_loss: 2.0621 - val_accuracy: 0.8459\n",
            "Epoch 46/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 0.6483 - accuracy: 0.8120 - val_loss: 2.0867 - val_accuracy: 0.8459\n",
            "Epoch 47/50\n",
            "233/233 [==============================] - 4s 19ms/step - loss: 0.6290 - accuracy: 0.8240 - val_loss: 2.2248 - val_accuracy: 0.8459\n",
            "Epoch 48/50\n",
            "233/233 [==============================] - 4s 19ms/step - loss: 0.6458 - accuracy: 0.8112 - val_loss: 2.2392 - val_accuracy: 0.8493\n",
            "Epoch 49/50\n",
            "233/233 [==============================] - 4s 19ms/step - loss: 0.6255 - accuracy: 0.8172 - val_loss: 2.3433 - val_accuracy: 0.8253\n",
            "Epoch 50/50\n",
            "233/233 [==============================] - 4s 17ms/step - loss: 0.6414 - accuracy: 0.8103 - val_loss: 2.3202 - val_accuracy: 0.8527\n"
          ]
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "id": "1dnHj1cnR9o5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 590
        },
        "outputId": "a1f71a5a-00b4-4148-c2bc-15312bbf3f06"
      },
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.plot(m.history['accuracy'])\n",
        "plt.plot(m.history['val_accuracy'])\n",
        "plt.title('model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()\n",
        "\n",
        "plt.plot(m.history['loss'])\n",
        "plt.plot(m.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7ff6e4baf310>"
            ]
          },
          "metadata": {},
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3",
      "language": "python"
    },
    "language_info": {
      "name": "python",
      "version": "3.7.6",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "colab": {
      "name": "Copy of intents_2 using LSTM.ipynb",
      "provenance": []
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
